<<<<<<< HEAD
}return i}, t.prototype._collectDefaults = function (t) { var e = []; if (this.isUndef(t.defaults) || (e = Object.keys(t.defaults)), !this.isUndef(t._super)) for (var i = this._collectDefaults(t._super), n = 0; n < i.length; n++)-1 === e.indexOf(i[n]) && e.push(i[n]); return e }, t.prototype.toString = function () { for (var e in t) { var i = e[0].match(/^[A-Z]$/), n = t[e] === this.constructor; if (this.isFunction(t[e]) && i && n) return e } return "Tone" }, Object.defineProperty(t.prototype, "numberOfInputs", { get: function () { return this.input ? this.isArray(this.input) ? this.input.length : 1 : 0 } }), Object.defineProperty(t.prototype, "numberOfOutputs", { get: function () { return this.output ? this.isArray(this.output) ? this.output.length : 1 : 0 } }), t.prototype.dispose = function () { return this.isUndef(this.input) || (this.input instanceof AudioNode && this.input.disconnect(), this.input = null), this.isUndef(this.output) || (this.output instanceof AudioNode && this.output.disconnect(), this.output = null), this }, t.prototype.connect = function (t, e, i) { return Array.isArray(this.output) ? (e = this.defaultArg(e, 0), this.output[e].connect(t, 0, i)) : this.output.connect(t, e, i), this }, t.prototype.disconnect = function (t, e, i) { this.isArray(this.output) ? this.isNumber(t) ? this.output[t].disconnect() : (e = this.defaultArg(e, 0), this.output[e].disconnect(t, 0, i)) : this.output.disconnect.apply(this.output, arguments) }, t.prototype.connectSeries = function () { if (arguments.length > 1) for (var t = arguments[0], e = 1; e < arguments.length; e++) { var i = arguments[e]; t.connect(i), t = i } return this }, t.prototype.chain = function () { if (arguments.length > 0) for (var t = this, e = 0; e < arguments.length; e++) { var i = arguments[e]; t.connect(i), t = i } return this }, t.prototype.fan = function () { if (arguments.length > 0) for (var t = 0; t < arguments.length; t++)this.connect(arguments[t]); return this }, AudioNode.prototype.chain = t.prototype.chain, AudioNode.prototype.fan = t.prototype.fan, t.prototype.defaultArg = function (t, e) { if (this.isObject(t) && this.isObject(e)) { var i = {}; for (var n in t) i[n] = this.defaultArg(e[n], t[n]); for (var o in e) i[o] = this.defaultArg(t[o], e[o]); return i } return this.isUndef(t) ? e : t }, t.prototype.optionsObject = function (t, e, i) { var n = {}; if (1 === t.length && this.isObject(t[0])) n = t[0]; else for (var o = 0; o < e.length; o++)n[e[o]] = t[o]; return this.isUndef(i) ? n : this.defaultArg(n, i) }, t.prototype.isUndef = function (t) { return "undefined" == typeof t }, t.prototype.isFunction = function (t) { return "function" == typeof t }, t.prototype.isNumber = function (t) { return "number" == typeof t }, t.prototype.isObject = function (t) { return "[object Object]" === Object.prototype.toString.call(t) && t.constructor === Object }, t.prototype.isBoolean = function (t) { return "boolean" == typeof t }, t.prototype.isArray = function (t) { return Array.isArray(t) }, t.prototype.isString = function (t) { return "string" == typeof t }, t.noOp = function () { }, t.prototype._readOnly = function (t) { if (Array.isArray(t)) for (var e = 0; e < t.length; e++)this._readOnly(t[e]); else Object.defineProperty(this, t, { writable: !1, enumerable: !0 }) }, t.prototype._writable = function (t) { if (Array.isArray(t)) for (var e = 0; e < t.length; e++)this._writable(t[e]); else Object.defineProperty(this, t, { writable: !0 }) }, t.State = { Started: "started", Stopped: "stopped", Paused: "paused" }, t.prototype.equalPowerScale = function (t) { var e = .5 * Math.PI; return Math.sin(t * e) }, t.prototype.dbToGain = function (t) { return Math.pow(2, t / 6) }, t.prototype.gainToDb = function (t) { return 20 * (Math.log(t) / Math.LN10) }, t.prototype.intervalToFrequencyRatio = function (t) { return Math.pow(2, t / 12) }, t.prototype.now = function () { return t.context.now() }, t.now = function () { return t.context.now() }, t.extend = function (e, i) { function n() { } t.prototype.isUndef(i) && (i = t), n.prototype = i.prototype, e.prototype = new n, e.prototype.constructor = e, e._super = i }; var e; return Object.defineProperty(t, "context", { get: function () { return e }, set: function (i) { e = t.Context && i instanceof t.Context ? i : new t.Context(i), t.Context && t.Context.emit("init", e) } }), Object.defineProperty(t.prototype, "context", { get: function () { return t.context } }), t.setContext = function (e) { t.context = e }, Object.defineProperty(t.prototype, "blockTime", { get: function () { return 128 / this.context.sampleRate } }), Object.defineProperty(t.prototype, "sampleTime", { get: function () { return 1 / this.context.sampleRate } }), Object.defineProperty(t, "supported", { get: function () { var t = window.hasOwnProperty("AudioContext") || window.hasOwnProperty("webkitAudioContext"), e = window.hasOwnProperty("Promise"), i = window.hasOwnProperty("Worker"); return t && e && i } }), t.version = "r10", !window.TONE_SILENCE_VERSION_LOGGING, t}(); var p; p = function (t) { "use strict"; return t.SignalBase = function () { }, t.extend(t.SignalBase), t.SignalBase.prototype.connect = function (e, i, n) { return t.Signal && t.Signal === e.constructor || t.Param && t.Param === e.constructor || t.TimelineSignal && t.TimelineSignal === e.constructor ? (e._param.cancelScheduledValues(0), e._param.value = 0, e.overridden = !0) : e instanceof AudioParam && (e.cancelScheduledValues(0), e.value = 0), t.prototype.connect.call(this, e, i, n), this }, t.SignalBase }(c); var h; h = function (t) { "use strict"; return t.WaveShaper = function (t, e) { this._shaper = this.input = this.output = this.context.createWaveShaper(), this._curve = null, Array.isArray(t) ? this.curve = t : isFinite(t) || this.isUndef(t) ? this._curve = new Float32Array(this.defaultArg(t, 1024)) : this.isFunction(t) && (this._curve = new Float32Array(this.defaultArg(e, 1024)), this.setMap(t)) }, t.extend(t.WaveShaper, t.SignalBase), t.WaveShaper.prototype.setMap = function (t) { for (var e = 0, i = this._curve.length; i > e; e++) { var n = e / (i - 1) * 2 - 1; this._curve[e] = t(n, e) } return this._shaper.curve = this._curve, this }, Object.defineProperty(t.WaveShaper.prototype, "curve", { get: function () { return this._shaper.curve }, set: function (t) { this._curve = new Float32Array(t), this._shaper.curve = this._curve } }), Object.defineProperty(t.WaveShaper.prototype, "oversample", { get: function () { return this._shaper.oversample }, set: function (t) { if (-1 === ["none", "2x", "4x"].indexOf(t)) throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'"); this._shaper.oversample = t } }), t.WaveShaper.prototype.dispose = function () { return t.prototype.dispose.call(this), this._shaper.disconnect(), this._shaper = null, this._curve = null, this }, t.WaveShaper }(c); var l; l = function (t) { return t.TimeBase = function (e, i) { if (!(this instanceof t.TimeBase)) return new t.TimeBase(e, i); if (this._expr = this._noOp, e instanceof t.TimeBase) this.copy(e); else if (!this.isUndef(i) || this.isNumber(e)) { i = this.defaultArg(i, this._defaultUnits); var n = this._primaryExpressions[i].method; this._expr = n.bind(this, e) } else this.isString(e) ? this.set(e) : this.isUndef(e) && (this._expr = this._defaultExpr()) }, t.extend(t.TimeBase), t.TimeBase.prototype.set = function (t) { return this._expr = this._parseExprString(t), this }, t.TimeBase.prototype.clone = function () { var t = new this.constructor; return t.copy(this), t }, t.TimeBase.prototype.copy = function (t) { var e = t._expr(); return this.set(e) }, t.TimeBase.prototype._primaryExpressions = { n: { regexp: /^(\d+)n/i, method: function (t) { return t = parseInt(t), 1 === t ? this._beatsToUnits(this._timeSignature()) : this._beatsToUnits(4 / t) } }, t: { regexp: /^(\d+)t/i, method: function (t) { return t = parseInt(t), this._beatsToUnits(8 / (3 * parseInt(t))) } }, m: { regexp: /^(\d+)m/i, method: function (t) { return this._beatsToUnits(parseInt(t) * this._timeSignature()) } }, i: { regexp: /^(\d+)i/i, method: function (t) { return this._ticksToUnits(parseInt(t)) } }, hz: { regexp: /^(\d+(?:\.\d+)?)hz/i, method: function (t) { return this._frequencyToUnits(parseFloat(t)) } }, tr: { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function (t, e, i) { var n = 0; return t && "0" !== t && (n += this._beatsToUnits(this._timeSignature() * parseFloat(t))), e && "0" !== e && (n += this._beatsToUnits(parseFloat(e))), i && "0" !== i && (n += this._beatsToUnits(parseFloat(i) / 4)), n } }, s: { regexp: /^(\d+(?:\.\d+)?s)/, method: function (t) { return this._secondsToUnits(parseFloat(t)) } }, samples: { regexp: /^(\d+)samples/, method: function (t) { return parseInt(t) / this.context.sampleRate } }, "default": { regexp: /^(\d+(?:\.\d+)?)/, method: function (t) { return this._primaryExpressions[this._defaultUnits].method.call(this, t) } } }, t.TimeBase.prototype._binaryExpressions = { "+": { regexp: /^\+/, precedence: 2, method: function (t, e) { return t() + e() } }, "-": { regexp: /^\-/, precedence: 2, method: function (t, e) { return t() - e() } }, "*": { regexp: /^\*/, precedence: 1, method: function (t, e) { return t() * e() } }, "/": { regexp: /^\//, precedence: 1, method: function (t, e) { return t() / e() } } }, t.TimeBase.prototype._unaryExpressions = { neg: { regexp: /^\-/, method: function (t) { return -t() } } }, t.TimeBase.prototype._syntaxGlue = { "(": { regexp: /^\(/ }, ")": { regexp: /^\)/ } }, t.TimeBase.prototype._tokenize = function (t) { function e(t, e) { for (var i = ["_binaryExpressions", "_unaryExpressions", "_primaryExpressions", "_syntaxGlue"], n = 0; n < i.length; n++) { var o = e[i[n]]; for (var r in o) { var s = o[r], a = s.regexp, u = t.match(a); if (null !== u) return { method: s.method, precedence: s.precedence, regexp: s.regexp, value: u[0] } } } throw new SyntaxError("Tone.TimeBase: Unexpected token " + t) } for (var i = -1, n = []; t.length > 0;) { t = t.trim(); var o = e(t, this); n.push(o), t = t.substr(o.value.length) } return { next: function () { return n[++i] }, peek: function () { return n[i + 1] } } }, t.TimeBase.prototype._matchGroup = function (t, e, i) { var n = !1; if (!this.isUndef(t)) for (var o in e) { var r = e[o]; if (r.regexp.test(t.value)) { if (this.isUndef(i)) return r; if (r.precedence === i) return r } } return n }, t.TimeBase.prototype._parseBinary = function (t, e) { this.isUndef(e) && (e = 2); var i; i = 0 > e ? this._parseUnary(t) : this._parseBinary(t, e - 1); for (var n = t.peek(); n && this._matchGroup(n, this._binaryExpressions, e);)n = t.next(), i = n.method.bind(this, i, this._parseBinary(t, e - 1)), n = t.peek(); return i }, t.TimeBase.prototype._parseUnary = function (t) { var e, i; e = t.peek(); var n = this._matchGroup(e, this._unaryExpressions); return n ? (e = t.next(), i = this._parseUnary(t), n.method.bind(this, i)) : this._parsePrimary(t) }, t.TimeBase.prototype._parsePrimary = function (t) { var e, i; if (e = t.peek(), this.isUndef(e)) throw new SyntaxError("Tone.TimeBase: Unexpected end of expression"); if (this._matchGroup(e, this._primaryExpressions)) { e = t.next(); var n = e.value.match(e.regexp); return e.method.bind(this, n[1], n[2], n[3]) } if (e && "(" === e.value) { if (t.next(), i = this._parseBinary(t), e = t.next(), !e || ")" !== e.value) throw new SyntaxError("Expected )"); return i } throw new SyntaxError("Tone.TimeBase: Cannot process token " + e.value) }, t.TimeBase.prototype._parseExprString = function (t) { this.isString(t) || (t = t.toString()); var e = this._tokenize(t), i = this._parseBinary(e); return i }, t.TimeBase.prototype._noOp = function () { return 0 }, t.TimeBase.prototype._defaultExpr = function () { return this._noOp }, t.TimeBase.prototype._defaultUnits = "s", t.TimeBase.prototype._frequencyToUnits = function (t) { return 1 / t }, t.TimeBase.prototype._beatsToUnits = function (e) { return 60 / t.Transport.bpm.value * e }, t.TimeBase.prototype._secondsToUnits = function (t) { return t }, t.TimeBase.prototype._ticksToUnits = function (e) { return e * (this._beatsToUnits(1) / t.Transport.PPQ) }, t.TimeBase.prototype._timeSignature = function () { return t.Transport.timeSignature }, t.TimeBase.prototype._pushExpr = function (e, i, n) { return e instanceof t.TimeBase || (e = new this.constructor(e, n)), this._expr = this._binaryExpressions[i].method.bind(this, this._expr, e._expr), this }, t.TimeBase.prototype.add = function (t, e) { return this._pushExpr(t, "+", e) }, t.TimeBase.prototype.sub = function (t, e) { return this._pushExpr(t, "-", e) }, t.TimeBase.prototype.mult = function (t, e) { return this._pushExpr(t, "*", e) }, t.TimeBase.prototype.div = function (t, e) { return this._pushExpr(t, "/", e) }, t.TimeBase.prototype.valueOf = function () { return this._expr() }, t.TimeBase.prototype.dispose = function () { this._expr = null }, t.TimeBase }(c); var f; f = function (t) { return t.Time = function (e, i) { return this instanceof t.Time ? (this._plusNow = !1, void t.TimeBase.call(this, e, i)) : new t.Time(e, i) }, t.extend(t.Time, t.TimeBase), t.Time.prototype._unaryExpressions = Object.create(t.TimeBase.prototype._unaryExpressions), t.Time.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function (e) { return t.Transport.nextSubdivision(e()) } }, t.Time.prototype._unaryExpressions.now = { regexp: /^\+/, method: function (t) { return this._plusNow = !0, t() } }, t.Time.prototype.quantize = function (t, e) { return e = this.defaultArg(e, 1), this._expr = function (t, e, i) { t = t(), e = e.toSeconds(); var n = Math.round(t / e), o = n * e, r = o - t; return t + r * i }.bind(this, this._expr, new this.constructor(t), e), this }, t.Time.prototype.addNow = function () { return this._plusNow = !0, this }, t.Time.prototype._defaultExpr = function () { return this._plusNow = !0, this._noOp }, t.Time.prototype.copy = function (e) { return t.TimeBase.prototype.copy.call(this, e), this._plusNow = e._plusNow, this }, t.Time.prototype.toNotation = function () { var t = this.toSeconds(), e = ["1m", "2n", "4n", "8n", "16n", "32n", "64n", "128n"], i = this._toNotationHelper(t, e), n = ["1m", "2n", "2t", "4n", "4t", "8n", "8t", "16n", "16t", "32n", "32t", "64n", "64t", "128n"], o = this._toNotationHelper(t, n); return o.split("+").length < i.split("+").length ? o : i }, t.Time.prototype._toNotationHelper = function (t, e) { for (var i = this._notationToUnits(e[e.length - 1]), n = "", o = 0; o < e.length; o++) { var r = this._notationToUnits(e[o]), s = t / r, a = 1e-6; if (a > 1 - s % 1 && (s += a), s = Math.floor(s), s > 0) { if (n += 1 === s ? e[o] : s.toString() + "*" + e[o], t -= s * r, i > t) break; n += " + " } } return "" === n && (n = "0"), n }, t.Time.prototype._notationToUnits = function (t) { for (var e = this._primaryExpressions, i = [e.n, e.t, e.m], n = 0; n < i.length; n++) { var o = i[n], r = t.match(o.regexp); if (r) return o.method.call(this, r[1]) } }, t.Time.prototype.toBarsBeatsSixteenths = function () { var t = this._beatsToUnits(1), e = this.toSeconds() / t, i = Math.floor(e / this._timeSignature()), n = e % 1 * 4; e = Math.floor(e) % this._timeSignature(), n = n.toString(), n.length > 3 && (n = parseFloat(n).toFixed(3)); var o = [i, e, n]; return o.join(":") }, t.Time.prototype.toTicks = function () { var e = this._beatsToUnits(1), i = this.valueOf() / e; return Math.floor(i * t.Transport.PPQ) }, t.Time.prototype.toSamples = function () { return this.toSeconds() * this.context.sampleRate }, t.Time.prototype.toFrequency = function () { return 1 / this.toSeconds() }, t.Time.prototype.toSeconds = function () { return this.valueOf() }, t.Time.prototype.toMilliseconds = function () { return 1e3 * this.toSeconds() }, t.Time.prototype.valueOf = function () { var t = this._expr(); return t + (this._plusNow ? this.now() : 0) }, t.Time }(c); var d; d = function (t) { t.Frequency = function (e, i) { return this instanceof t.Frequency ? void t.TimeBase.call(this, e, i) : new t.Frequency(e, i) }, t.extend(t.Frequency, t.TimeBase), t.Frequency.prototype._primaryExpressions = Object.create(t.TimeBase.prototype._primaryExpressions), t.Frequency.prototype._primaryExpressions.midi = { regexp: /^(\d+(?:\.\d+)?midi)/, method: function (t) { return this.midiToFrequency(t) } }, t.Frequency.prototype._primaryExpressions.note = { regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i, method: function (t, i) { var n = e[t.toLowerCase()], o = n + 12 * (parseInt(i) + 1); return this.midiToFrequency(o) } }, t.Frequency.prototype._primaryExpressions.tr = { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function (t, e, i) { var n = 1; return t && "0" !== t && (n *= this._beatsToUnits(this._timeSignature() * parseFloat(t))), e && "0" !== e && (n *= this._beatsToUnits(parseFloat(e))), i && "0" !== i && (n *= this._beatsToUnits(parseFloat(i) / 4)), n } }, t.Frequency.prototype.transpose = function (t) { return this._expr = function (t, e) { var i = t(); return i * this.intervalToFrequencyRatio(e) }.bind(this, this._expr, t), this }, t.Frequency.prototype.harmonize = function (t) { return this._expr = function (t, e) { for (var i = t(), n = [], o = 0; o < e.length; o++)n[o] = i * this.intervalToFrequencyRatio(e[o]); return n }.bind(this, this._expr, t), this }, t.Frequency.prototype.toMidi = function () { return this.frequencyToMidi(this.valueOf()) }, t.Frequency.prototype.toNote = function () { var e = this.valueOf(), n = Math.log(e / t.Frequency.A4) / Math.LN2, o = Math.round(12 * n) + 57, r = Math.floor(o / 12); 0 > r && (o += -12 * r); var s = i[o % 12]; return s + r.toString() }, t.Frequency.prototype.toSeconds = function () { return 1 / this.valueOf() }, t.Frequency.prototype.toFrequency = function () { return this.valueOf() }, t.Frequency.prototype.toTicks = function () { var e = this._beatsToUnits(1), i = this.valueOf() / e; return Math.floor(i * t.Transport.PPQ) }, t.Frequency.prototype._frequencyToUnits = function (t) { return t }, t.Frequency.prototype._ticksToUnits = function (e) { return 1 / (60 * e / (t.Transport.bpm.value * t.Transport.PPQ)) }, t.Frequency.prototype._beatsToUnits = function (e) { return 1 / t.TimeBase.prototype._beatsToUnits.call(this, e) }, t.Frequency.prototype._secondsToUnits = function (t) { return 1 / t }, t.Frequency.prototype._defaultUnits = "hz"; var e = { cbb: -2, cb: -1, c: 0, "c#": 1, cx: 2, dbb: 0, db: 1, d: 2, "d#": 3, dx: 4, ebb: 2, eb: 3, e: 4, "e#": 5, ex: 6, fbb: 3, fb: 4, f: 5, "f#": 6, fx: 7, gbb: 5, gb: 6, g: 7, "g#": 8, gx: 9, abb: 7, ab: 8, a: 9, "a#": 10, ax: 11, bbb: 9, bb: 10, b: 11, "b#": 12, bx: 13 }, i = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]; return t.Frequency.A4 = 440, t.Frequency.prototype.midiToFrequency = function (e) { return t.Frequency.A4 * Math.pow(2, (e - 69) / 12) }, t.Frequency.prototype.frequencyToMidi = function (e) { return 69 + 12 * Math.log(e / t.Frequency.A4) / Math.LN2 }, t.Frequency }(c); var m; m = function (t) { return t.TransportTime = function (e, i) { return this instanceof t.TransportTime ? void t.Time.call(this, e, i) : new t.TransportTime(e, i) }, t.extend(t.TransportTime, t.Time), t.TransportTime.prototype._unaryExpressions = Object.create(t.Time.prototype._unaryExpressions), t.TransportTime.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function (e) { var i = this._secondsToTicks(e()), n = Math.ceil(t.Transport.ticks / i); return this._ticksToUnits(n * i) } }, t.TransportTime.prototype._secondsToTicks = function (e) { var i = this._beatsToUnits(1), n = e / i; return Math.round(n * t.Transport.PPQ) }, t.TransportTime.prototype.valueOf = function () { var e = this._secondsToTicks(this._expr()); return e + (this._plusNow ? t.Transport.ticks : 0) }, t.TransportTime.prototype.toTicks = function () { return this.valueOf() }, t.TransportTime.prototype.toSeconds = function () { var e = this._expr(); return e + (this._plusNow ? t.Transport.seconds : 0) }, t.TransportTime.prototype.toFrequency = function () { return 1 / this.toSeconds() }, t.TransportTime }(c); var y; y = function (t) { "use strict"; return t.Emitter = function () { this._events = {} }, t.extend(t.Emitter), t.Emitter.prototype.on = function (t, e) { for (var i = t.split(/\W+/), n = 0; n < i.length; n++) { var o = i[n]; this._events.hasOwnProperty(o) || (this._events[o] = []), this._events[o].push(e) } return this }, t.Emitter.prototype.off = function (e, i) { for (var n = e.split(/\W+/), o = 0; o < n.length; o++)if (e = n[o], this._events.hasOwnProperty(e)) if (t.prototype.isUndef(i)) this._events[e] = []; else for (var r = this._events[e], s = 0; s < r.length; s++)r[s] === i && r.splice(s, 1); return this }, t.Emitter.prototype.emit = function (t) { if (this._events) { var e = Array.apply(null, arguments).slice(1); if (this._events.hasOwnProperty(t)) for (var i = this._events[t], n = 0, o = i.length; o > n; n++)i[n].apply(this, e) } return this }, t.Emitter.mixin = function (e) { var i = ["on", "off", "emit"]; e._events = {}; for (var n = 0; n < i.length; n++) { var o = i[n], r = t.Emitter.prototype[o]; e[o] = r } }, t.Emitter.prototype.dispose = function () { return t.prototype.dispose.call(this), this._events = null, this }, t.Emitter }(c); var v; v = function (t) { function e() { function e(e, i, o) { if (e.input) Array.isArray(e.input) ? (t.prototype.isUndef(o) && (o = 0), this.connect(e.input[o])) : this.connect(e.input, i, o); else try { e instanceof AudioNode ? n.call(this, e, i, o) : n.call(this, e, i) } catch (r) { throw new Error("error connecting to node: " + e + "\n" + r) } } function i(e, i, n) { if (e && e.input && Array.isArray(e.input)) t.prototype.isUndef(n) && (n = 0), this.disconnect(e.input[n], i, n); else if (e && e.input) this.disconnect(e.input, i, n); else try { o.apply(this, arguments) } catch (r) { throw new Error("error disconnecting node: " + e + "\n" + r) } } var n = AudioNode.prototype.connect, o = AudioNode.prototype.disconnect; AudioNode.prototype.connect !== e && (AudioNode.prototype.connect = e, AudioNode.prototype.disconnect = i) } return !window.hasOwnProperty("AudioContext") && window.hasOwnProperty("webkitAudioContext") && (window.AudioContext = window.webkitAudioContext), t.Context = function (e) { t.Emitter.call(this), e || (e = new window.AudioContext), this._context = e; for (var i in this._context) this._defineProperty(this._context, i); this._latencyHint = "interactive", this._lookAhead = .1, this._updateInterval = this._lookAhead / 3, this._computedUpdateInterval = 0, this._worker = this._createWorker(), this._constants = {} }, t.extend(t.Context, t.Emitter), t.Emitter.mixin(t.Context), t.Context.prototype._defineProperty = function (t, e) { this.isUndef(this[e]) && Object.defineProperty(this, e, { get: function () { return "function" == typeof t[e] ? t[e].bind(t) : t[e] }, set: function (i) { t[e] = i } }) }, t.Context.prototype.now = function () { return this._context.currentTime }, t.Context.prototype._createWorker = function () { window.URL = window.URL || window.webkitURL; var t = new Blob(["var timeoutTime = " + (1e3 * this._updateInterval).toFixed(1) + ";self.onmessage = function(msg){	timeoutTime = parseInt(msg.data);};function tick(){	setTimeout(tick, timeoutTime);	self.postMessage('tick');}tick();"]), e = URL.createObjectURL(t), i = new Worker(e); return i.addEventListener("message", function () { this.emit("tick") }.bind(this)), i.addEventListener("message", function () { var t = this.now(); if (this.isNumber(this._lastUpdate)) { var e = t - this._lastUpdate; this._computedUpdateInterval = Math.max(e, .97 * this._computedUpdateInterval) } this._lastUpdate = t }.bind(this)), i }, t.Context.prototype.getConstant = function (t) { if (this._constants[t]) return this._constants[t]; for (var e = this._context.createBuffer(1, 128, this._context.sampleRate), i = e.getChannelData(0), n = 0; n < i.length; n++)i[n] = t; var o = this._context.createBufferSource(); return o.channelCount = 1, o.channelCountMode = "explicit", o.buffer = e, o.loop = !0, o.start(0), this._constants[t] = o, o }, Object.defineProperty(t.Context.prototype, "lag", { get: function () { var t = this._computedUpdateInterval - this._updateInterval; return t = Math.max(t, 0) } }), Object.defineProperty(t.Context.prototype, "lookAhead", { get: function () { return this._lookAhead }, set: function (t) { this._lookAhead = t } }), Object.defineProperty(t.Context.prototype, "updateInterval", { get: function () { return this._updateInterval }, set: function (e) { this._updateInterval = Math.max(e, t.prototype.blockTime), this._worker.postMessage(Math.max(1e3 * e, 1)) } }), Object.defineProperty(t.Context.prototype, "latencyHint", { get: function () { return this._latencyHint }, set: function (t) { var e = t; if (this._latencyHint = t, this.isString(t)) switch (t) { case "interactive": e = .1, this._context.latencyHint = t; break; case "playback": e = .8, this._context.latencyHint = t; break; case "balanced": e = .25, this._context.latencyHint = t; break; case "fastest": e = .01 }this.lookAhead = e, this.updateInterval = e / 3 } }), t.supported ? (e(), t.context = new t.Context) : console.warn("This browser does not support Tone.js"), t.Context }(c); var g; g = function (t) { return t.Type = { Default: "number", Time: "time", Frequency: "frequency", TransportTime: "transportTime", Ticks: "ticks", NormalRange: "normalRange", AudioRange: "audioRange", Decibels: "db", Interval: "interval", BPM: "bpm", Positive: "positive", Cents: "cents", Degrees: "degrees", MIDI: "midi", BarsBeatsSixteenths: "barsBeatsSixteenths", Samples: "samples", Hertz: "hertz", Note: "note", Milliseconds: "milliseconds", Seconds: "seconds", Notation: "notation" }, t.prototype.toSeconds = function (e) { return this.isNumber(e) ? e : this.isUndef(e) ? this.now() : this.isString(e) ? new t.Time(e).toSeconds() : e instanceof t.TimeBase ? e.toSeconds() : void 0 }, t.prototype.toFrequency = function (e) { return this.isNumber(e) ? e : this.isString(e) || this.isUndef(e) ? new t.Frequency(e).valueOf() : e instanceof t.TimeBase ? e.toFrequency() : void 0 }, t.prototype.toTicks = function (e) { return this.isNumber(e) || this.isString(e) ? new t.TransportTime(e).toTicks() : this.isUndef(e) ? t.Transport.ticks : e instanceof t.TimeBase ? e.toTicks() : void 0 }, t }(c, f, d, m); var _; _ = function (t) { "use strict"; return t.Param = function () { var e = this.optionsObject(arguments, ["param", "units", "convert"], t.Param.defaults); this._param = this.input = e.param, this.units = e.units, this.convert = e.convert, this.overridden = !1, this._lfo = null, this.isObject(e.lfo) ? this.value = e.lfo : this.isUndef(e.value) || (this.value = e.value) }, t.extend(t.Param), t.Param.defaults = { units: t.Type.Default, convert: !0, param: void 0 }, Object.defineProperty(t.Param.prototype, "value", { get: function () { return this._toUnits(this._param.value) }, set: function (e) { if (this.isObject(e)) { if (this.isUndef(t.LFO)) throw new Error("Include 'Tone.LFO' to use an LFO as a Param value."); this._lfo && this._lfo.dispose(), this._lfo = new t.LFO(e).start(), this._lfo.connect(this.input) } else { var i = this._fromUnits(e); this._param.cancelScheduledValues(0), this._param.value = i } } }), t.Param.prototype._fromUnits = function (e) { if (!this.convert && !this.isUndef(this.convert)) return e; switch (this.units) { case t.Type.Time: return this.toSeconds(e); case t.Type.Frequency: return this.toFrequency(e); case t.Type.Decibels: return this.dbToGain(e); case t.Type.NormalRange: return Math.min(Math.max(e, 0), 1); case t.Type.AudioRange: return Math.min(Math.max(e, -1), 1); case t.Type.Positive: return Math.max(e, 0); default: return e } }, t.Param.prototype._toUnits = function (e) { if (!this.convert && !this.isUndef(this.convert)) return e; switch (this.units) { case t.Type.Decibels: return this.gainToDb(e); default: return e } }, t.Param.prototype._minOutput = 1e-5, t.Param.prototype.setValueAtTime = function (t, e) { return t = this._fromUnits(t), e = this.toSeconds(e), e <= this.now() + this.blockTime ? this._param.value = t : this._param.setValueAtTime(t, e), this }, t.Param.prototype.setRampPoint = function (t) { t = this.defaultArg(t, this.now()); var e = this._param.value; return 0 === e && (e = this._minOutput), this._param.setValueAtTime(e, t), this }, t.Param.prototype.linearRampToValueAtTime = function (t, e) { return t = this._fromUnits(t), this._param.linearRampToValueAtTime(t, this.toSeconds(e)), this }, t.Param.prototype.exponentialRampToValueAtTime = function (t, e) { return t = this._fromUnits(t), t = Math.max(this._minOutput, t), this._param.exponentialRampToValueAtTime(t, this.toSeconds(e)), this }, t.Param.prototype.exponentialRampToValue = function (t, e, i) { return i = this.toSeconds(i), this.setRampPoint(i), this.exponentialRampToValueAtTime(t, i + this.toSeconds(e)), this }, t.Param.prototype.linearRampToValue = function (t, e, i) { return i = this.toSeconds(i), this.setRampPoint(i), this.linearRampToValueAtTime(t, i + this.toSeconds(e)), this }, t.Param.prototype.setTargetAtTime = function (t, e, i) { return t = this._fromUnits(t), t = Math.max(this._minOutput, t), i = Math.max(this._minOutput, i), this._param.setTargetAtTime(t, this.toSeconds(e), i), this }, t.Param.prototype.setValueCurveAtTime = function (t, e, i) { for (var n = 0; n < t.length; n++)t[n] = this._fromUnits(t[n]); return this._param.setValueCurveAtTime(t, this.toSeconds(e), this.toSeconds(i)), this }, t.Param.prototype.cancelScheduledValues = function (t) { return this._param.cancelScheduledValues(this.toSeconds(t)), this }, t.Param.prototype.rampTo = function (e, i, n) { return i = this.defaultArg(i, 0), this.units === t.Type.Frequency || this.units === t.Type.BPM || this.units === t.Type.Decibels ? this.exponentialRampToValue(e, i, n) : this.linearRampToValue(e, i, n), this }, Object.defineProperty(t.Param.prototype, "lfo", { get: function () { return this._lfo } }), t.Param.prototype.dispose = function () { return t.prototype.dispose.call(this), this._param = null, this._lfo && (this._lfo.dispose(), this._lfo = null), this }, t.Param }(c); var T; T = function (t) { "use strict"; return window.GainNode && !AudioContext.prototype.createGain && (AudioContext.prototype.createGain = AudioContext.prototype.createGainNode), t.Gain = function () { var e = this.optionsObject(arguments, ["gain", "units"], t.Gain.defaults); this.input = this.output = this._gainNode = this.context.createGain(), this.gain = new t.Param({ param: this._gainNode.gain, units: e.units, value: e.gain, convert: e.convert }), this._readOnly("gain") }, t.extend(t.Gain), t.Gain.defaults = { gain: 1, convert: !0 }, t.Gain.prototype.dispose = function () { t.Param.prototype.dispose.call(this), this._gainNode.disconnect(), this._gainNode = null, this._writable("gain"), this.gain.dispose(), this.gain = null }, t.prototype.createInsOuts = function (e, i) { 1 === e ? this.input = new t.Gain : e > 1 && (this.input = new Array(e)), 1 === i ? this.output = new t.Gain : i > 1 && (this.output = new Array(e)) }, t.Gain }(c, _); var b; b = function (t) { "use strict"; return t.Signal = function () { var e = this.optionsObject(arguments, ["value", "units"], t.Signal.defaults); this.output = this._gain = this.context.createGain(), e.param = this._gain.gain, t.Param.call(this, e), this.input = this._param = this._gain.gain, this.context.getConstant(1).chain(this._gain) }, t.extend(t.Signal, t.Param), t.Signal.defaults = { value: 0, units: t.Type.Default, convert: !0 }, t.Signal.prototype.connect = t.SignalBase.prototype.connect, t.Signal.prototype.dispose = function () { return t.Param.prototype.dispose.call(this), this._param = null, this._gain.disconnect(), this._gain = null, this }, t.Signal }(c, h, g, _); var x; x = function (t) { "use strict"; return t.Add = function (e) { this.createInsOuts(2, 0), this._sum = this.input[0] = this.input[1] = this.output = new t.Gain, this._param = this.input[1] = new t.Signal(e), this._param.connect(this._sum) }, t.extend(t.Add, t.Signal), t.Add.prototype.dispose = function () { return t.prototype.dispose.call(this), this._sum.dispose(), this._sum = null, this._param.dispose(), this._param = null, this }, t.Add }(c, b); var S; S = function (t) { "use strict"; return t.Multiply = function (e) { this.createInsOuts(2, 0), this._mult = this.input[0] = this.output = new t.Gain, this._param = this.input[1] = this.output.gain, this._param.value = this.defaultArg(e, 0) }, t.extend(t.Multiply, t.Signal), t.Multiply.prototype.dispose = function () { return t.prototype.dispose.call(this), this._mult.dispose(), this._mult = null, this._param = null, this }, t.Multiply }(c, b); var w; w = function (t) { "use strict"; return t.Scale = function (e, i) { this._outputMin = this.defaultArg(e, 0), this._outputMax = this.defaultArg(i, 1), this._scale = this.input = new t.Multiply(1), this._add = this.output = new t.Add(0), this._scale.connect(this._add), this._setRange() }, t.extend(t.Scale, t.SignalBase), Object.defineProperty(t.Scale.prototype, "min", { get: function () { return this._outputMin }, set: function (t) { this._outputMin = t, this._setRange() } }), Object.defineProperty(t.Scale.prototype, "max", { get: function () { return this._outputMax }, set: function (t) { this._outputMax = t, this._setRange() } }), t.Scale.prototype._setRange = function () { this._add.value = this._outputMin, this._scale.value = this._outputMax - this._outputMin }, t.Scale.prototype.dispose = function () { return t.prototype.dispose.call(this), this._add.dispose(), this._add = null, this._scale.dispose(), this._scale = null, this }, t.Scale }(c, x, S); var A; A = function () { var e = b, n = x, o = S, r = w, s = c, a = i; s.setContext(a.audiocontext), t.Signal = function (t) { var i = new e(t); return i }, e.prototype.fade = e.prototype.linearRampToValueAtTime, o.prototype.fade = e.prototype.fade, n.prototype.fade = e.prototype.fade, r.prototype.fade = e.prototype.fade, e.prototype.setInput = function (t) { t.connect(this) }, o.prototype.setInput = e.prototype.setInput, n.prototype.setInput = e.prototype.setInput, r.prototype.setInput = e.prototype.setInput, e.prototype.add = function (t) { var e = new n(t); return this.connect(e), e }, o.prototype.add = e.prototype.add, n.prototype.add = e.prototype.add, r.prototype.add = e.prototype.add, e.prototype.mult = function (t) { var e = new o(t); return this.connect(e), e }, o.prototype.mult = e.prototype.mult, n.prototype.mult = e.prototype.mult, r.prototype.mult = e.prototype.mult, e.prototype.scale = function (e, i, n, o) { var s, a; 4 === arguments.length ? (s = t.prototype.map(n, e, i, 0, 1) - .5, a = t.prototype.map(o, e, i, 0, 1) - .5) : (s = arguments[0], a = arguments[1]); var u = new r(s, a); return this.connect(u), u }, o.prototype.scale = e.prototype.scale, n.prototype.scale = e.prototype.scale, r.prototype.scale = e.prototype.scale }(b, x, S, w, c, i); var P; P = function () { var e = i, n = x, o = S, r = w; t.Oscillator = function (i, n) { if ("string" == typeof i) { var o = n; n = i, i = o } if ("number" == typeof n) { var o = n; n = i, i = o } this.started = !1, this.phaseAmount = void 0, this.oscillator = e.audiocontext.createOscillator(), this.f = i || 440, this.oscillator.type = n || "sine", this.oscillator.frequency.setValueAtTime(this.f, e.audiocontext.currentTime), this.output = e.audiocontext.createGain(), this._freqMods = [], this.output.gain.value = .5, this.output.gain.setValueAtTime(.5, e.audiocontext.currentTime), this.oscillator.connect(this.output), this.panPosition = 0, this.connection = e.input, this.panner = new t.Panner(this.output, this.connection, 1), this.mathOps = [this.output], e.soundArray.push(this) }, t.Oscillator.prototype.start = function (t, i) { if (this.started) { var n = e.audiocontext.currentTime; this.stop(n) } if (!this.started) { var o = i || this.f, r = this.oscillator.type; this.oscillator && (this.oscillator.disconnect(), this.oscillator = void 0), this.oscillator = e.audiocontext.createOscillator(), this.oscillator.frequency.value = Math.abs(o), this.oscillator.type = r, this.oscillator.connect(this.output), t = t || 0, this.oscillator.start(t + e.audiocontext.currentTime), this.freqNode = this.oscillator.frequency;
=======
}return i}, t.prototype._collectDefaults = function (t) { var e = []; if (this.isUndef(t.defaults) || (e = Object.keys(t.defaults)), !this.isUndef(t._super)) for (var i = this._collectDefaults(t._super), n = 0; n < i.length; n++)-1 === e.indexOf(i[n]) && e.push(i[n]); return e }, t.prototype.toString = function () { for (var e in t) { var i = e[0].match(/^[A-Z]$/), n = t[e] === this.constructor; if (this.isFunction(t[e]) && i && n) return e } return "Tone" }, Object.defineProperty(t.prototype, "numberOfInputs", { get: function () { return this.input ? this.isArray(this.input) ? this.input.length : 1 : 0 } }), Object.defineProperty(t.prototype, "numberOfOutputs", { get: function () { return this.output ? this.isArray(this.output) ? this.output.length : 1 : 0 } }), t.prototype.dispose = function () { return this.isUndef(this.input) || (this.input instanceof AudioNode && this.input.disconnect(), this.input = null), this.isUndef(this.output) || (this.output instanceof AudioNode && this.output.disconnect(), this.output = null), this }, t.prototype.connect = function (t, e, i) { return Array.isArray(this.output) ? (e = this.defaultArg(e, 0), this.output[e].connect(t, 0, i)) : this.output.connect(t, e, i), this }, t.prototype.disconnect = function (t, e, i) { this.isArray(this.output) ? this.isNumber(t) ? this.output[t].disconnect() : (e = this.defaultArg(e, 0), this.output[e].disconnect(t, 0, i)) : this.output.disconnect.apply(this.output, arguments) }, t.prototype.connectSeries = function () { if (arguments.length > 1) for (var t = arguments[0], e = 1; e < arguments.length; e++) { var i = arguments[e]; t.connect(i), t = i } return this }, t.prototype.chain = function () { if (arguments.length > 0) for (var t = this, e = 0; e < arguments.length; e++) { var i = arguments[e]; t.connect(i), t = i } return this }, t.prototype.fan = function () { if (arguments.length > 0) for (var t = 0; t < arguments.length; t++)this.connect(arguments[t]); return this }, AudioNode.prototype.chain = t.prototype.chain, AudioNode.prototype.fan = t.prototype.fan, t.prototype.defaultArg = function (t, e) { if (this.isObject(t) && this.isObject(e)) { var i = {}; for (var n in t) i[n] = this.defaultArg(e[n], t[n]); for (var o in e) i[o] = this.defaultArg(t[o], e[o]); return i } return this.isUndef(t) ? e : t }, t.prototype.optionsObject = function (t, e, i) { var n = {}; if (1 === t.length && this.isObject(t[0])) n = t[0]; else for (var o = 0; o < e.length; o++)n[e[o]] = t[o]; return this.isUndef(i) ? n : this.defaultArg(n, i) }, t.prototype.isUndef = function (t) { return "undefined" == typeof t }, t.prototype.isFunction = function (t) { return "function" == typeof t }, t.prototype.isNumber = function (t) { return "number" == typeof t }, t.prototype.isObject = function (t) { return "[object Object]" === Object.prototype.toString.call(t) && t.constructor === Object }, t.prototype.isBoolean = function (t) { return "boolean" == typeof t }, t.prototype.isArray = function (t) { return Array.isArray(t) }, t.prototype.isString = function (t) { return "string" == typeof t }, t.noOp = function () { }, t.prototype._readOnly = function (t) { if (Array.isArray(t)) for (var e = 0; e < t.length; e++)this._readOnly(t[e]); else Object.defineProperty(this, t, { writable: !1, enumerable: !0 }) }, t.prototype._writable = function (t) { if (Array.isArray(t)) for (var e = 0; e < t.length; e++)this._writable(t[e]); else Object.defineProperty(this, t, { writable: !0 }) }, t.State = { Started: "started", Stopped: "stopped", Paused: "paused" }, t.prototype.equalPowerScale = function (t) { var e = .5 * Math.PI; return Math.sin(t * e) }, t.prototype.dbToGain = function (t) { return Math.pow(2, t / 6) }, t.prototype.gainToDb = function (t) { return 20 * (Math.log(t) / Math.LN10) }, t.prototype.intervalToFrequencyRatio = function (t) { return Math.pow(2, t / 12) }, t.prototype.now = function () { return t.context.now() }, t.now = function () { return t.context.now() }, t.extend = function (e, i) { function n() { } t.prototype.isUndef(i) && (i = t), n.prototype = i.prototype, e.prototype = new n, e.prototype.constructor = e, e._super = i }; var e; return Object.defineProperty(t, "context", { get: function () { return e }, set: function (i) { e = t.Context && i instanceof t.Context ? i : new t.Context(i), t.Context && t.Context.emit("init", e) } }), Object.defineProperty(t.prototype, "context", { get: function () { return t.context } }), t.setContext = function (e) { t.context = e }, Object.defineProperty(t.prototype, "blockTime", { get: function () { return 128 / this.context.sampleRate } }), Object.defineProperty(t.prototype, "sampleTime", { get: function () { return 1 / this.context.sampleRate } }), Object.defineProperty(t, "supported", { get: function () { var t = window.hasOwnProperty("AudioContext") || window.hasOwnProperty("webkitAudioContext"), e = window.hasOwnProperty("Promise"), i = window.hasOwnProperty("Worker"); return t && e && i } }), t.version = "r10", !window.TONE_SILENCE_VERSION_LOGGING, t}(); var p; p = function (t) { "use strict"; return t.SignalBase = function () { }, t.extend(t.SignalBase), t.SignalBase.prototype.connect = function (e, i, n) { return t.Signal && t.Signal === e.constructor || t.Param && t.Param === e.constructor || t.TimelineSignal && t.TimelineSignal === e.constructor ? (e._param.cancelScheduledValues(0), e._param.value = 0, e.overridden = !0) : e instanceof AudioParam && (e.cancelScheduledValues(0), e.value = 0), t.prototype.connect.call(this, e, i, n), this }, t.SignalBase }(c); var h; h = function (t) { "use strict"; return t.WaveShaper = function (t, e) { this._shaper = this.input = this.output = this.context.createWaveShaper(), this._curve = null, Array.isArray(t) ? this.curve = t : isFinite(t) || this.isUndef(t) ? this._curve = new Float32Array(this.defaultArg(t, 1024)) : this.isFunction(t) && (this._curve = new Float32Array(this.defaultArg(e, 1024)), this.setMap(t)) }, t.extend(t.WaveShaper, t.SignalBase), t.WaveShaper.prototype.setMap = function (t) { for (var e = 0, i = this._curve.length; i > e; e++) { var n = e / (i - 1) * 2 - 1; this._curve[e] = t(n, e) } return this._shaper.curve = this._curve, this }, Object.defineProperty(t.WaveShaper.prototype, "curve", { get: function () { return this._shaper.curve }, set: function (t) { this._curve = new Float32Array(t), this._shaper.curve = this._curve } }), Object.defineProperty(t.WaveShaper.prototype, "oversample", { get: function () { return this._shaper.oversample }, set: function (t) { if (-1 === ["none", "2x", "4x"].indexOf(t)) throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'"); this._shaper.oversample = t } }), t.WaveShaper.prototype.dispose = function () { return t.prototype.dispose.call(this), this._shaper.disconnect(), this._shaper = null, this._curve = null, this }, t.WaveShaper }(c); var l; l = function (t) { return t.TimeBase = function (e, i) { if (!(this instanceof t.TimeBase)) return new t.TimeBase(e, i); if (this._expr = this._noOp, e instanceof t.TimeBase) this.copy(e); else if (!this.isUndef(i) || this.isNumber(e)) { i = this.defaultArg(i, this._defaultUnits); var n = this._primaryExpressions[i].method; this._expr = n.bind(this, e) } else this.isString(e) ? this.set(e) : this.isUndef(e) && (this._expr = this._defaultExpr()) }, t.extend(t.TimeBase), t.TimeBase.prototype.set = function (t) { return this._expr = this._parseExprString(t), this }, t.TimeBase.prototype.clone = function () { var t = new this.constructor; return t.copy(this), t }, t.TimeBase.prototype.copy = function (t) { var e = t._expr(); return this.set(e) }, t.TimeBase.prototype._primaryExpressions = { n: { regexp: /^(\d+)n/i, method: function (t) { return t = parseInt(t), 1 === t ? this._beatsToUnits(this._timeSignature()) : this._beatsToUnits(4 / t) } }, t: { regexp: /^(\d+)t/i, method: function (t) { return t = parseInt(t), this._beatsToUnits(8 / (3 * parseInt(t))) } }, m: { regexp: /^(\d+)m/i, method: function (t) { return this._beatsToUnits(parseInt(t) * this._timeSignature()) } }, i: { regexp: /^(\d+)i/i, method: function (t) { return this._ticksToUnits(parseInt(t)) } }, hz: { regexp: /^(\d+(?:\.\d+)?)hz/i, method: function (t) { return this._frequencyToUnits(parseFloat(t)) } }, tr: { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function (t, e, i) { var n = 0; return t && "0" !== t && (n += this._beatsToUnits(this._timeSignature() * parseFloat(t))), e && "0" !== e && (n += this._beatsToUnits(parseFloat(e))), i && "0" !== i && (n += this._beatsToUnits(parseFloat(i) / 4)), n } }, s: { regexp: /^(\d+(?:\.\d+)?s)/, method: function (t) { return this._secondsToUnits(parseFloat(t)) } }, samples: { regexp: /^(\d+)samples/, method: function (t) { return parseInt(t) / this.context.sampleRate } }, "default": { regexp: /^(\d+(?:\.\d+)?)/, method: function (t) { return this._primaryExpressions[this._defaultUnits].method.call(this, t) } } }, t.TimeBase.prototype._binaryExpressions = { "+": { regexp: /^\+/, precedence: 2, method: function (t, e) { return t() + e() } }, "-": { regexp: /^\-/, precedence: 2, method: function (t, e) { return t() - e() } }, "*": { regexp: /^\*/, precedence: 1, method: function (t, e) { return t() * e() } }, "/": { regexp: /^\//, precedence: 1, method: function (t, e) { return t() / e() } } }, t.TimeBase.prototype._unaryExpressions = { neg: { regexp: /^\-/, method: function (t) { return -t() } } }, t.TimeBase.prototype._syntaxGlue = { "(": { regexp: /^\(/ }, ")": { regexp: /^\)/ } }, t.TimeBase.prototype._tokenize = function (t) { function e(t, e) { for (var i = ["_binaryExpressions", "_unaryExpressions", "_primaryExpressions", "_syntaxGlue"], n = 0; n < i.length; n++) { var o = e[i[n]]; for (var r in o) { var s = o[r], a = s.regexp, u = t.match(a); if (null !== u) return { method: s.method, precedence: s.precedence, regexp: s.regexp, value: u[0] } } } throw new SyntaxError("Tone.TimeBase: Unexpected token " + t) } for (var i = -1, n = []; t.length > 0;) { t = t.trim(); var o = e(t, this); n.push(o), t = t.substr(o.value.length) } return { next: function () { return n[++i] }, peek: function () { return n[i + 1] } } }, t.TimeBase.prototype._matchGroup = function (t, e, i) { var n = !1; if (!this.isUndef(t)) for (var o in e) { var r = e[o]; if (r.regexp.test(t.value)) { if (this.isUndef(i)) return r; if (r.precedence === i) return r } } return n }, t.TimeBase.prototype._parseBinary = function (t, e) { this.isUndef(e) && (e = 2); var i; i = 0 > e ? this._parseUnary(t) : this._parseBinary(t, e - 1); for (var n = t.peek(); n && this._matchGroup(n, this._binaryExpressions, e);)n = t.next(), i = n.method.bind(this, i, this._parseBinary(t, e - 1)), n = t.peek(); return i }, t.TimeBase.prototype._parseUnary = function (t) { var e, i; e = t.peek(); var n = this._matchGroup(e, this._unaryExpressions); return n ? (e = t.next(), i = this._parseUnary(t), n.method.bind(this, i)) : this._parsePrimary(t) }, t.TimeBase.prototype._parsePrimary = function (t) { var e, i; if (e = t.peek(), this.isUndef(e)) throw new SyntaxError("Tone.TimeBase: Unexpected end of expression"); if (this._matchGroup(e, this._primaryExpressions)) { e = t.next(); var n = e.value.match(e.regexp); return e.method.bind(this, n[1], n[2], n[3]) } if (e && "(" === e.value) { if (t.next(), i = this._parseBinary(t), e = t.next(), !e || ")" !== e.value) throw new SyntaxError("Expected )"); return i } throw new SyntaxError("Tone.TimeBase: Cannot process token " + e.value) }, t.TimeBase.prototype._parseExprString = function (t) { this.isString(t) || (t = t.toString()); var e = this._tokenize(t), i = this._parseBinary(e); return i }, t.TimeBase.prototype._noOp = function () { return 0 }, t.TimeBase.prototype._defaultExpr = function () { return this._noOp }, t.TimeBase.prototype._defaultUnits = "s", t.TimeBase.prototype._frequencyToUnits = function (t) { return 1 / t }, t.TimeBase.prototype._beatsToUnits = function (e) { return 60 / t.Transport.bpm.value * e }, t.TimeBase.prototype._secondsToUnits = function (t) { return t }, t.TimeBase.prototype._ticksToUnits = function (e) { return e * (this._beatsToUnits(1) / t.Transport.PPQ) }, t.TimeBase.prototype._timeSignature = function () { return t.Transport.timeSignature }, t.TimeBase.prototype._pushExpr = function (e, i, n) { return e instanceof t.TimeBase || (e = new this.constructor(e, n)), this._expr = this._binaryExpressions[i].method.bind(this, this._expr, e._expr), this }, t.TimeBase.prototype.add = function (t, e) { return this._pushExpr(t, "+", e) }, t.TimeBase.prototype.sub = function (t, e) { return this._pushExpr(t, "-", e) }, t.TimeBase.prototype.mult = function (t, e) { return this._pushExpr(t, "*", e) }, t.TimeBase.prototype.div = function (t, e) { return this._pushExpr(t, "/", e) }, t.TimeBase.prototype.valueOf = function () { return this._expr() }, t.TimeBase.prototype.dispose = function () { this._expr = null }, t.TimeBase }(c); var f; f = function (t) { return t.Time = function (e, i) { return this instanceof t.Time ? (this._plusNow = !1, void t.TimeBase.call(this, e, i)) : new t.Time(e, i) }, t.extend(t.Time, t.TimeBase), t.Time.prototype._unaryExpressions = Object.create(t.TimeBase.prototype._unaryExpressions), t.Time.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function (e) { return t.Transport.nextSubdivision(e()) } }, t.Time.prototype._unaryExpressions.now = { regexp: /^\+/, method: function (t) { return this._plusNow = !0, t() } }, t.Time.prototype.quantize = function (t, e) { return e = this.defaultArg(e, 1), this._expr = function (t, e, i) { t = t(), e = e.toSeconds(); var n = Math.round(t / e), o = n * e, r = o - t; return t + r * i }.bind(this, this._expr, new this.constructor(t), e), this }, t.Time.prototype.addNow = function () { return this._plusNow = !0, this }, t.Time.prototype._defaultExpr = function () { return this._plusNow = !0, this._noOp }, t.Time.prototype.copy = function (e) { return t.TimeBase.prototype.copy.call(this, e), this._plusNow = e._plusNow, this }, t.Time.prototype.toNotation = function () { var t = this.toSeconds(), e = ["1m", "2n", "4n", "8n", "16n", "32n", "64n", "128n"], i = this._toNotationHelper(t, e), n = ["1m", "2n", "2t", "4n", "4t", "8n", "8t", "16n", "16t", "32n", "32t", "64n", "64t", "128n"], o = this._toNotationHelper(t, n); return o.split("+").length < i.split("+").length ? o : i }, t.Time.prototype._toNotationHelper = function (t, e) { for (var i = this._notationToUnits(e[e.length - 1]), n = "", o = 0; o < e.length; o++) { var r = this._notationToUnits(e[o]), s = t / r, a = 1e-6; if (a > 1 - s % 1 && (s += a), s = Math.floor(s), s > 0) { if (n += 1 === s ? e[o] : s.toString() + "*" + e[o], t -= s * r, i > t) break; n += " + " } } return "" === n && (n = "0"), n }, t.Time.prototype._notationToUnits = function (t) { for (var e = this._primaryExpressions, i = [e.n, e.t, e.m], n = 0; n < i.length; n++) { var o = i[n], r = t.match(o.regexp); if (r) return o.method.call(this, r[1]) } }, t.Time.prototype.toBarsBeatsSixteenths = function () { var t = this._beatsToUnits(1), e = this.toSeconds() / t, i = Math.floor(e / this._timeSignature()), n = e % 1 * 4; e = Math.floor(e) % this._timeSignature(), n = n.toString(), n.length > 3 && (n = parseFloat(n).toFixed(3)); var o = [i, e, n]; return o.join(":") }, t.Time.prototype.toTicks = function () { var e = this._beatsToUnits(1), i = this.valueOf() / e; return Math.floor(i * t.Transport.PPQ) }, t.Time.prototype.toSamples = function () { return this.toSeconds() * this.context.sampleRate }, t.Time.prototype.toFrequency = function () { return 1 / this.toSeconds() }, t.Time.prototype.toSeconds = function () { return this.valueOf() }, t.Time.prototype.toMilliseconds = function () { return 1e3 * this.toSeconds() }, t.Time.prototype.valueOf = function () { var t = this._expr(); return t + (this._plusNow ? this.now() : 0) }, t.Time }(c); var d; d = function (t) { t.Frequency = function (e, i) { return this instanceof t.Frequency ? void t.TimeBase.call(this, e, i) : new t.Frequency(e, i) }, t.extend(t.Frequency, t.TimeBase), t.Frequency.prototype._primaryExpressions = Object.create(t.TimeBase.prototype._primaryExpressions), t.Frequency.prototype._primaryExpressions.midi = { regexp: /^(\d+(?:\.\d+)?midi)/, method: function (t) { return this.midiToFrequency(t) } }, t.Frequency.prototype._primaryExpressions.note = { regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i, method: function (t, i) { var n = e[t.toLowerCase()], o = n + 12 * (parseInt(i) + 1); return this.midiToFrequency(o) } }, t.Frequency.prototype._primaryExpressions.tr = { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function (t, e, i) { var n = 1; return t && "0" !== t && (n *= this._beatsToUnits(this._timeSignature() * parseFloat(t))), e && "0" !== e && (n *= this._beatsToUnits(parseFloat(e))), i && "0" !== i && (n *= this._beatsToUnits(parseFloat(i) / 4)), n } }, t.Frequency.prototype.transpose = function (t) { return this._expr = function (t, e) { var i = t(); return i * this.intervalToFrequencyRatio(e) }.bind(this, this._expr, t), this }, t.Frequency.prototype.harmonize = function (t) { return this._expr = function (t, e) { for (var i = t(), n = [], o = 0; o < e.length; o++)n[o] = i * this.intervalToFrequencyRatio(e[o]); return n }.bind(this, this._expr, t), this }, t.Frequency.prototype.toMidi = function () { return this.frequencyToMidi(this.valueOf()) }, t.Frequency.prototype.toNote = function () { var e = this.valueOf(), n = Math.log(e / t.Frequency.A4) / Math.LN2, o = Math.round(12 * n) + 57, r = Math.floor(o / 12); 0 > r && (o += -12 * r); var s = i[o % 12]; return s + r.toString() }, t.Frequency.prototype.toSeconds = function () { return 1 / this.valueOf() }, t.Frequency.prototype.toFrequency = function () { return this.valueOf() }, t.Frequency.prototype.toTicks = function () { var e = this._beatsToUnits(1), i = this.valueOf() / e; return Math.floor(i * t.Transport.PPQ) }, t.Frequency.prototype._frequencyToUnits = function (t) { return t }, t.Frequency.prototype._ticksToUnits = function (e) { return 1 / (60 * e / (t.Transport.bpm.value * t.Transport.PPQ)) }, t.Frequency.prototype._beatsToUnits = function (e) { return 1 / t.TimeBase.prototype._beatsToUnits.call(this, e) }, t.Frequency.prototype._secondsToUnits = function (t) { return 1 / t }, t.Frequency.prototype._defaultUnits = "hz"; var e = { cbb: -2, cb: -1, c: 0, "c#": 1, cx: 2, dbb: 0, db: 1, d: 2, "d#": 3, dx: 4, ebb: 2, eb: 3, e: 4, "e#": 5, ex: 6, fbb: 3, fb: 4, f: 5, "f#": 6, fx: 7, gbb: 5, gb: 6, g: 7, "g#": 8, gx: 9, abb: 7, ab: 8, a: 9, "a#": 10, ax: 11, bbb: 9, bb: 10, b: 11, "b#": 12, bx: 13 }, i = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]; return t.Frequency.A4 = 440, t.Frequency.prototype.midiToFrequency = function (e) { return t.Frequency.A4 * Math.pow(2, (e - 69) / 12) }, t.Frequency.prototype.frequencyToMidi = function (e) { return 69 + 12 * Math.log(e / t.Frequency.A4) / Math.LN2 }, t.Frequency }(c); var m; m = function (t) { return t.TransportTime = function (e, i) { return this instanceof t.TransportTime ? void t.Time.call(this, e, i) : new t.TransportTime(e, i) }, t.extend(t.TransportTime, t.Time), t.TransportTime.prototype._unaryExpressions = Object.create(t.Time.prototype._unaryExpressions), t.TransportTime.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function (e) { var i = this._secondsToTicks(e()), n = Math.ceil(t.Transport.ticks / i); return this._ticksToUnits(n * i) } }, t.TransportTime.prototype._secondsToTicks = function (e) { var i = this._beatsToUnits(1), n = e / i; return Math.round(n * t.Transport.PPQ) }, t.TransportTime.prototype.valueOf = function () { var e = this._secondsToTicks(this._expr()); return e + (this._plusNow ? t.Transport.ticks : 0) }, t.TransportTime.prototype.toTicks = function () { return this.valueOf() }, t.TransportTime.prototype.toSeconds = function () { var e = this._expr(); return e + (this._plusNow ? t.Transport.seconds : 0) }, t.TransportTime.prototype.toFrequency = function () { return 1 / this.toSeconds() }, t.TransportTime }(c); var y; y = function (t) { "use strict"; return t.Emitter = function () { this._events = {} }, t.extend(t.Emitter), t.Emitter.prototype.on = function (t, e) { for (var i = t.split(/\W+/), n = 0; n < i.length; n++) { var o = i[n]; this._events.hasOwnProperty(o) || (this._events[o] = []), this._events[o].push(e) } return this }, t.Emitter.prototype.off = function (e, i) { for (var n = e.split(/\W+/), o = 0; o < n.length; o++)if (e = n[o], this._events.hasOwnProperty(e)) if (t.prototype.isUndef(i)) this._events[e] = []; else for (var r = this._events[e], s = 0; s < r.length; s++)r[s] === i && r.splice(s, 1); return this }, t.Emitter.prototype.emit = function (t) { if (this._events) { var e = Array.apply(null, arguments).slice(1); if (this._events.hasOwnProperty(t)) for (var i = this._events[t], n = 0, o = i.length; o > n; n++)i[n].apply(this, e) } return this }, t.Emitter.mixin = function (e) { var i = ["on", "off", "emit"]; e._events = {}; for (var n = 0; n < i.length; n++) { var o = i[n], r = t.Emitter.prototype[o]; e[o] = r } }, t.Emitter.prototype.dispose = function () { return t.prototype.dispose.call(this), this._events = null, this }, t.Emitter }(c); var v; v = function (t) { function e() { function e(e, i, o) { if (e.input) Array.isArray(e.input) ? (t.prototype.isUndef(o) && (o = 0), this.connect(e.input[o])) : this.connect(e.input, i, o); else try { e instanceof AudioNode ? n.call(this, e, i, o) : n.call(this, e, i) } catch (r) { throw new Error("error connecting to node: " + e + "\n" + r) } } function i(e, i, n) { if (e && e.input && Array.isArray(e.input)) t.prototype.isUndef(n) && (n = 0), this.disconnect(e.input[n], i, n); else if (e && e.input) this.disconnect(e.input, i, n); else try { o.apply(this, arguments) } catch (r) { throw new Error("error disconnecting node: " + e + "\n" + r) } } var n = AudioNode.prototype.connect, o = AudioNode.prototype.disconnect; AudioNode.prototype.connect !== e && (AudioNode.prototype.connect = e, AudioNode.prototype.disconnect = i) } return !window.hasOwnProperty("AudioContext") && window.hasOwnProperty("webkitAudioContext") && (window.AudioContext = window.webkitAudioContext), t.Context = function (e) { t.Emitter.call(this), e || (e = new window.AudioContext), this._context = e; for (var i in this._context) this._defineProperty(this._context, i); this._latencyHint = "interactive", this._lookAhead = .1, this._updateInterval = this._lookAhead / 3, this._computedUpdateInterval = 0, this._worker = this._createWorker(), this._constants = {} }, t.extend(t.Context, t.Emitter), t.Emitter.mixin(t.Context), t.Context.prototype._defineProperty = function (t, e) { this.isUndef(this[e]) && Object.defineProperty(this, e, { get: function () { return "function" == typeof t[e] ? t[e].bind(t) : t[e] }, set: function (i) { t[e] = i } }) }, t.Context.prototype.now = function () { return this._context.currentTime }, t.Context.prototype._createWorker = function () { window.URL = window.URL || window.webkitURL; var t = new Blob(["var timeoutTime = " + (1e3 * this._updateInterval).toFixed(1) + ";self.onmessage = function(msg){	timeoutTime = parseInt(msg.data);};function tick(){	setTimeout(tick, timeoutTime);	self.postMessage('tick');}tick();"]), e = URL.createObjectURL(t), i = new Worker(e); return i.addEventListener("message", function () { this.emit("tick") }.bind(this)), i.addEventListener("message", function () { var t = this.now(); if (this.isNumber(this._lastUpdate)) { var e = t - this._lastUpdate; this._computedUpdateInterval = Math.max(e, .97 * this._computedUpdateInterval) } this._lastUpdate = t }.bind(this)), i }, t.Context.prototype.getConstant = function (t) { if (this._constants[t]) return this._constants[t]; for (var e = this._context.createBuffer(1, 128, this._context.sampleRate), i = e.getChannelData(0), n = 0; n < i.length; n++)i[n] = t; var o = this._context.createBufferSource(); return o.channelCount = 1, o.channelCountMode = "explicit", o.buffer = e, o.loop = !0, o.start(0), this._constants[t] = o, o }, Object.defineProperty(t.Context.prototype, "lag", { get: function () { var t = this._computedUpdateInterval - this._updateInterval; return t = Math.max(t, 0) } }), Object.defineProperty(t.Context.prototype, "lookAhead", { get: function () { return this._lookAhead }, set: function (t) { this._lookAhead = t } }), Object.defineProperty(t.Context.prototype, "updateInterval", { get: function () { return this._updateInterval }, set: function (e) { this._updateInterval = Math.max(e, t.prototype.blockTime), this._worker.postMessage(Math.max(1e3 * e, 1)) } }), Object.defineProperty(t.Context.prototype, "latencyHint", { get: function () { return this._latencyHint }, set: function (t) { var e = t; if (this._latencyHint = t, this.isString(t)) switch (t) { case "interactive": e = .1, this._context.latencyHint = t; break; case "playback": e = .8, this._context.latencyHint = t; break; case "balanced": e = .25, this._context.latencyHint = t; break; case "fastest": e = .01 }this.lookAhead = e, this.updateInterval = e / 3 } }), t.supported ? (e(), t.context = new t.Context) : console.warn("This browser does not support Tone.js"), t.Context }(c); var g; g = function (t) { return t.Type = { Default: "number", Time: "time", Frequency: "frequency", TransportTime: "transportTime", Ticks: "ticks", NormalRange: "normalRange", AudioRange: "audioRange", Decibels: "db", Interval: "interval", BPM: "bpm", Positive: "positive", Cents: "cents", Degrees: "degrees", MIDI: "midi", BarsBeatsSixteenths: "barsBeatsSixteenths", Samples: "samples", Hertz: "hertz", Note: "note", Milliseconds: "milliseconds", Seconds: "seconds", Notation: "notation" }, t.prototype.toSeconds = function (e) { return this.isNumber(e) ? e : this.isUndef(e) ? this.now() : this.isString(e) ? new t.Time(e).toSeconds() : e instanceof t.TimeBase ? e.toSeconds() : void 0 }, t.prototype.toFrequency = function (e) { return this.isNumber(e) ? e : this.isString(e) || this.isUndef(e) ? new t.Frequency(e).valueOf() : e instanceof t.TimeBase ? e.toFrequency() : void 0 }, t.prototype.toTicks = function (e) { return this.isNumber(e) || this.isString(e) ? new t.TransportTime(e).toTicks() : this.isUndef(e) ? t.Transport.ticks : e instanceof t.TimeBase ? e.toTicks() : void 0 }, t }(c, f, d, m); var _; _ = function (t) { "use strict"; return t.Param = function () { var e = this.optionsObject(arguments, ["param", "units", "convert"], t.Param.defaults); this._param = this.input = e.param, this.units = e.units, this.convert = e.convert, this.overridden = !1, this._lfo = null, this.isObject(e.lfo) ? this.value = e.lfo : this.isUndef(e.value) || (this.value = e.value) }, t.extend(t.Param), t.Param.defaults = { units: t.Type.Default, convert: !0, param: void 0 }, Object.defineProperty(t.Param.prototype, "value", { get: function () { return this._toUnits(this._param.value) }, set: function (e) { if (this.isObject(e)) { if (this.isUndef(t.LFO)) throw new Error("Include 'Tone.LFO' to use an LFO as a Param value."); this._lfo && this._lfo.dispose(), this._lfo = new t.LFO(e).start(), this._lfo.connect(this.input) } else { var i = this._fromUnits(e); this._param.cancelScheduledValues(0), this._param.value = i } } }), t.Param.prototype._fromUnits = function (e) { if (!this.convert && !this.isUndef(this.convert)) return e; switch (this.units) { case t.Type.Time: return this.toSeconds(e); case t.Type.Frequency: return this.toFrequency(e); case t.Type.Decibels: return this.dbToGain(e); case t.Type.NormalRange: return Math.min(Math.max(e, 0), 1); case t.Type.AudioRange: return Math.min(Math.max(e, -1), 1); case t.Type.Positive: return Math.max(e, 0); default: return e } }, t.Param.prototype._toUnits = function (e) { if (!this.convert && !this.isUndef(this.convert)) return e; switch (this.units) { case t.Type.Decibels: return this.gainToDb(e); default: return e } }, t.Param.prototype._minOutput = 1e-5, t.Param.prototype.setValueAtTime = function (t, e) { return t = this._fromUnits(t), e = this.toSeconds(e), e <= this.now() + this.blockTime ? this._param.value = t : this._param.setValueAtTime(t, e), this }, t.Param.prototype.setRampPoint = function (t) { t = this.defaultArg(t, this.now()); var e = this._param.value; return 0 === e && (e = this._minOutput), this._param.setValueAtTime(e, t), this }, t.Param.prototype.linearRampToValueAtTime = function (t, e) { return t = this._fromUnits(t), this._param.linearRampToValueAtTime(t, this.toSeconds(e)), this }, t.Param.prototype.exponentialRampToValueAtTime = function (t, e) { return t = this._fromUnits(t), t = Math.max(this._minOutput, t), this._param.exponentialRampToValueAtTime(t, this.toSeconds(e)), this }, t.Param.prototype.exponentialRampToValue = function (t, e, i) { return i = this.toSeconds(i), this.setRampPoint(i), this.exponentialRampToValueAtTime(t, i + this.toSeconds(e)), this }, t.Param.prototype.linearRampToValue = function (t, e, i) { return i = this.toSeconds(i), this.setRampPoint(i), this.linearRampToValueAtTime(t, i + this.toSeconds(e)), this }, t.Param.prototype.setTargetAtTime = function (t, e, i) { return t = this._fromUnits(t), t = Math.max(this._minOutput, t), i = Math.max(this._minOutput, i), this._param.setTargetAtTime(t, this.toSeconds(e), i), this }, t.Param.prototype.setValueCurveAtTime = function (t, e, i) { for (var n = 0; n < t.length; n++)t[n] = this._fromUnits(t[n]); return this._param.setValueCurveAtTime(t, this.toSeconds(e), this.toSeconds(i)), this }, t.Param.prototype.cancelScheduledValues = function (t) { return this._param.cancelScheduledValues(this.toSeconds(t)), this }, t.Param.prototype.rampTo = function (e, i, n) { return i = this.defaultArg(i, 0), this.units === t.Type.Frequency || this.units === t.Type.BPM || this.units === t.Type.Decibels ? this.exponentialRampToValue(e, i, n) : this.linearRampToValue(e, i, n), this }, Object.defineProperty(t.Param.prototype, "lfo", { get: function () { return this._lfo } }), t.Param.prototype.dispose = function () { return t.prototype.dispose.call(this), this._param = null, this._lfo && (this._lfo.dispose(), this._lfo = null), this }, t.Param }(c); var T; T = function (t) { "use strict"; return window.GainNode && !AudioContext.prototype.createGain && (AudioContext.prototype.createGain = AudioContext.prototype.createGainNode), t.Gain = function () { var e = this.optionsObject(arguments, ["gain", "units"], t.Gain.defaults); this.input = this.output = this._gainNode = this.context.createGain(), this.gain = new t.Param({ param: this._gainNode.gain, units: e.units, value: e.gain, convert: e.convert }), this._readOnly("gain") }, t.extend(t.Gain), t.Gain.defaults = { gain: 1, convert: !0 }, t.Gain.prototype.dispose = function () { t.Param.prototype.dispose.call(this), this._gainNode.disconnect(), this._gainNode = null, this._writable("gain"), this.gain.dispose(), this.gain = null }, t.prototype.createInsOuts = function (e, i) { 1 === e ? this.input = new t.Gain : e > 1 && (this.input = new Array(e)), 1 === i ? this.output = new t.Gain : i > 1 && (this.output = new Array(e)) }, t.Gain }(c, _); var b; b = function (t) { "use strict"; return t.Signal = function () { var e = this.optionsObject(arguments, ["value", "units"], t.Signal.defaults); this.output = this._gain = this.context.createGain(), e.param = this._gain.gain, t.Param.call(this, e), this.input = this._param = this._gain.gain, this.context.getConstant(1).chain(this._gain) }, t.extend(t.Signal, t.Param), t.Signal.defaults = { value: 0, units: t.Type.Default, convert: !0 }, t.Signal.prototype.connect = t.SignalBase.prototype.connect, t.Signal.prototype.dispose = function () { return t.Param.prototype.dispose.call(this), this._param = null, this._gain.disconnect(), this._gain = null, this }, t.Signal }(c, h, g, _); var x; x = function (t) { "use strict"; return t.Add = function (e) { this.createInsOuts(2, 0), this._sum = this.input[0] = this.input[1] = this.output = new t.Gain, this._param = this.input[1] = new t.Signal(e), this._param.connect(this._sum) }, t.extend(t.Add, t.Signal), t.Add.prototype.dispose = function () { return t.prototype.dispose.call(this), this._sum.dispose(), this._sum = null, this._param.dispose(), this._param = null, this }, t.Add }(c, b); var S; S = function (t) { "use strict"; return t.Multiply = function (e) { this.createInsOuts(2, 0), this._mult = this.input[0] = this.output = new t.Gain, this._param = this.input[1] = this.output.gain, this._param.value = this.defaultArg(e, 0) }, t.extend(t.Multiply, t.Signal), t.Multiply.prototype.dispose = function () { return t.prototype.dispose.call(this), this._mult.dispose(), this._mult = null, this._param = null, this }, t.Multiply }(c, b); var w; w = function (t) { "use strict"; return t.Scale = function (e, i) { this._outputMin = this.defaultArg(e, 0), this._outputMax = this.defaultArg(i, 1), this._scale = this.input = new t.Multiply(1), this._add = this.output = new t.Add(0), this._scale.connect(this._add), this._setRange() }, t.extend(t.Scale, t.SignalBase), Object.defineProperty(t.Scale.prototype, "min", { get: function () { return this._outputMin }, set: function (t) { this._outputMin = t, this._setRange() } }), Object.defineProperty(t.Scale.prototype, "max", { get: function () { return this._outputMax }, set: function (t) { this._outputMax = t, this._setRange() } }), t.Scale.prototype._setRange = function () { this._add.value = this._outputMin, this._scale.value = this._outputMax - this._outputMin }, t.Scale.prototype.dispose = function () { return t.prototype.dispose.call(this), this._add.dispose(), this._add = null, this._scale.dispose(), this._scale = null, this }, t.Scale }(c, x, S); var A; A = function () { var e = b, n = x, o = S, r = w, s = c, a = i; s.setContext(a.audiocontext), t.Signal = function (t) { var i = new e(t); return i }, e.prototype.fade = e.prototype.linearRampToValueAtTime, o.prototype.fade = e.prototype.fade, n.prototype.fade = e.prototype.fade, r.prototype.fade = e.prototype.fade, e.prototype.setInput = function (t) { t.connect(this) }, o.prototype.setInput = e.prototype.setInput, n.prototype.setInput = e.prototype.setInput, r.prototype.setInput = e.prototype.setInput, e.prototype.add = function (t) { var e = new n(t); return this.connect(e), e }, o.prototype.add = e.prototype.add, n.prototype.add = e.prototype.add, r.prototype.add = e.prototype.add, e.prototype.mult = function (t) { var e = new o(t); return this.connect(e), e }, o.prototype.mult = e.prototype.mult, n.prototype.mult = e.prototype.mult, r.prototype.mult = e.prototype.mult, e.prototype.scale = function (e, i, n, o) { var s, a; 4 === arguments.length ? (s = t.prototype.map(n, e, i, 0, 1) - .5, a = t.prototype.map(o, e, i, 0, 1) - .5) : (s = arguments[0], a = arguments[1]); var u = new r(s, a); return this.connect(u), u }, o.prototype.scale = e.prototype.scale, n.prototype.scale = e.prototype.scale, r.prototype.scale = e.prototype.scale }(b, x, S, w, c, i); var P; P = function () { var e = i, n = x, o = S, r = w; t.Oscillator = function (i, n) { if ("string" == typeof i) { var o = n; n = i, i = o } if ("number" == typeof n) { var o = n; n = i, i = o } this.started = !1, this.phaseAmount = void 0, this.oscillator = e.audiocontext.createOscillator(), this.f = i || 440, this.oscillator.type = n || "sine", this.oscillator.frequency.setValueAtTime(this.f, e.audiocontext.currentTime), this.output = e.audiocontext.createGain(), this._freqMods = [], this.output.gain.value = .5, this.output.gain.setValueAtTime(.5, e.audiocontext.currentTime), this.oscillator.connect(this.output), this.panPosition = 0, this.connection = e.input, this.panner = new t.Panner(this.output, this.connection, 1), this.mathOps = [this.output], e.soundArray.push(this) }, t.Oscillator.prototype.start = function (t, i) { if (this.started) { var n = e.audiocontext.currentTime; this.stop(n) } if (!this.started) { var o = i || this.f, r = this.oscillator.type; this.oscillator && (this.oscillator.disconnect(), this.oscillator = void 0), this.oscillator = e.audiocontext.createOscillator(), this.oscillator.frequency.value = Math.abs(o), this.oscillator.type = r, this.oscillator.connect(this.output), t = t || 0, this.oscillator.start(t + e.audiocontext.currentTime), this.freqNode = this.oscillator.frequency;
>>>>>>> 9d933a718cd310636e7bf4dc82eeaa36319d80f0
